/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type QuoteStruct = {
  nonce: BigNumberish;
  user: string;
  baseToken: string;
  quoteToken: string;
  baseTokenAmount: BigNumberish;
  quoteTokenAmount: BigNumberish;
  expiryTimestamp: BigNumberish;
};

export type QuoteStructOutput = [
  BigNumber,
  string,
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  nonce: BigNumber;
  user: string;
  baseToken: string;
  quoteToken: string;
  baseTokenAmount: BigNumber;
  quoteTokenAmount: BigNumber;
  expiryTimestamp: BigNumber;
};

export interface MmLinkedPoolInterface extends utils.Interface {
  functions: {
    "createMMInfo(address,address,string,bool)": FunctionFragment;
    "getMMInfo(address)": FunctionFragment;
    "getUserNonce(address,address)": FunctionFragment;
    "incrementNonce(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "redeemToken(address)": FunctionFragment;
    "removeMMInfo(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "swap(address,(uint256,address,address,address,uint256,uint256,uint256),bytes)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateMMInfo(address,bool)": FunctionFragment;
    "verifyQuoteSignature(address,(uint256,address,address,address,uint256,uint256,uint256),bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createMMInfo",
    values: [string, string, string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "getMMInfo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getUserNonce",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "incrementNonce",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "redeemToken", values: [string]): string;
  encodeFunctionData(
    functionFragment: "removeMMInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [string, QuoteStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMMInfo",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyQuoteSignature",
    values: [string, QuoteStruct, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "createMMInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMMInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incrementNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeMMInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMMInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyQuoteSignature",
    data: BytesLike
  ): Result;

  events: {
    "CreateMMInfo(address,address,string,bool)": EventFragment;
    "IncrementNonce(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RemoveMMInfo(address)": EventFragment;
    "Swap(uint256,address,address,address,address,address,uint256,uint256)": EventFragment;
    "UpdateMMInfo(address,address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CreateMMInfo"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IncrementNonce"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveMMInfo"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Swap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateMMInfo"): EventFragment;
}

export type CreateMMInfoEvent = TypedEvent<
  [string, string, string, boolean],
  { mm: string; treasury: string; name: string; active: boolean }
>;

export type CreateMMInfoEventFilter = TypedEventFilter<CreateMMInfoEvent>;

export type IncrementNonceEvent = TypedEvent<
  [string, string],
  { mm: string; user: string }
>;

export type IncrementNonceEventFilter = TypedEventFilter<IncrementNonceEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type RemoveMMInfoEvent = TypedEvent<[string], { mm: string }>;

export type RemoveMMInfoEventFilter = TypedEventFilter<RemoveMMInfoEvent>;

export type SwapEvent = TypedEvent<
  [BigNumber, string, string, string, string, string, BigNumber, BigNumber],
  {
    nonce: BigNumber;
    user: string;
    mm: string;
    mmTreasury: string;
    baseToken: string;
    quoteToken: string;
    baseTokenAmount: BigNumber;
    quoteTokenAmount: BigNumber;
  }
>;

export type SwapEventFilter = TypedEventFilter<SwapEvent>;

export type UpdateMMInfoEvent = TypedEvent<
  [string, string, boolean],
  { mm: string; treasury: string; active: boolean }
>;

export type UpdateMMInfoEventFilter = TypedEventFilter<UpdateMMInfoEvent>;

export interface MmLinkedPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MmLinkedPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createMMInfo(
      _mm: string,
      _treasury: string,
      _name: string,
      _active: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getMMInfo(
      _mm: string,
      overrides?: CallOverrides
    ): Promise<[string, string, boolean]>;

    getUserNonce(
      _mm: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    incrementNonce(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    redeemToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeMMInfo(
      _mm: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swap(
      _mmSigner: string,
      _quote: QuoteStruct,
      signature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateMMInfo(
      _treasury: string,
      _active: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    verifyQuoteSignature(
      _account: string,
      _quote: QuoteStruct,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  createMMInfo(
    _mm: string,
    _treasury: string,
    _name: string,
    _active: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getMMInfo(
    _mm: string,
    overrides?: CallOverrides
  ): Promise<[string, string, boolean]>;

  getUserNonce(
    _mm: string,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  incrementNonce(
    _user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  redeemToken(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeMMInfo(
    _mm: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swap(
    _mmSigner: string,
    _quote: QuoteStruct,
    signature: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateMMInfo(
    _treasury: string,
    _active: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  verifyQuoteSignature(
    _account: string,
    _quote: QuoteStruct,
    _signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    createMMInfo(
      _mm: string,
      _treasury: string,
      _name: string,
      _active: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    getMMInfo(
      _mm: string,
      overrides?: CallOverrides
    ): Promise<[string, string, boolean]>;

    getUserNonce(
      _mm: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    incrementNonce(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    redeemToken(_token: string, overrides?: CallOverrides): Promise<void>;

    removeMMInfo(_mm: string, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    swap(
      _mmSigner: string,
      _quote: QuoteStruct,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMMInfo(
      _treasury: string,
      _active: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    verifyQuoteSignature(
      _account: string,
      _quote: QuoteStruct,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "CreateMMInfo(address,address,string,bool)"(
      mm?: null,
      treasury?: null,
      name?: null,
      active?: null
    ): CreateMMInfoEventFilter;
    CreateMMInfo(
      mm?: null,
      treasury?: null,
      name?: null,
      active?: null
    ): CreateMMInfoEventFilter;

    "IncrementNonce(address,address)"(
      mm?: null,
      user?: null
    ): IncrementNonceEventFilter;
    IncrementNonce(mm?: null, user?: null): IncrementNonceEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "RemoveMMInfo(address)"(mm?: null): RemoveMMInfoEventFilter;
    RemoveMMInfo(mm?: null): RemoveMMInfoEventFilter;

    "Swap(uint256,address,address,address,address,address,uint256,uint256)"(
      nonce?: null,
      user?: string | null,
      mm?: string | null,
      mmTreasury?: null,
      baseToken?: null,
      quoteToken?: null,
      baseTokenAmount?: null,
      quoteTokenAmount?: null
    ): SwapEventFilter;
    Swap(
      nonce?: null,
      user?: string | null,
      mm?: string | null,
      mmTreasury?: null,
      baseToken?: null,
      quoteToken?: null,
      baseTokenAmount?: null,
      quoteTokenAmount?: null
    ): SwapEventFilter;

    "UpdateMMInfo(address,address,bool)"(
      mm?: null,
      treasury?: null,
      active?: null
    ): UpdateMMInfoEventFilter;
    UpdateMMInfo(
      mm?: null,
      treasury?: null,
      active?: null
    ): UpdateMMInfoEventFilter;
  };

  estimateGas: {
    createMMInfo(
      _mm: string,
      _treasury: string,
      _name: string,
      _active: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getMMInfo(_mm: string, overrides?: CallOverrides): Promise<BigNumber>;

    getUserNonce(
      _mm: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    incrementNonce(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    redeemToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeMMInfo(
      _mm: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swap(
      _mmSigner: string,
      _quote: QuoteStruct,
      signature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateMMInfo(
      _treasury: string,
      _active: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    verifyQuoteSignature(
      _account: string,
      _quote: QuoteStruct,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createMMInfo(
      _mm: string,
      _treasury: string,
      _name: string,
      _active: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getMMInfo(
      _mm: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserNonce(
      _mm: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    incrementNonce(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeemToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeMMInfo(
      _mm: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swap(
      _mmSigner: string,
      _quote: QuoteStruct,
      signature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateMMInfo(
      _treasury: string,
      _active: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    verifyQuoteSignature(
      _account: string,
      _quote: QuoteStruct,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
