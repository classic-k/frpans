/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface PancakeSwapSmartRouterInterface extends utils.Interface {
  functions: {
    "owner()": FunctionFragment;
    "pancakeswapV2()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setStableSwapFactory(address)": FunctionFragment;
    "stableswapFactory()": FunctionFragment;
    "swap(address,address,uint256,uint256,uint8)": FunctionFragment;
    "swapMulti(address[],uint256,uint256,uint8[])": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "weth()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pancakeswapV2",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setStableSwapFactory",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "stableswapFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapMulti",
    values: [string[], BigNumberish, BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;

  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pancakeswapV2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStableSwapFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stableswapFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swapMulti", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;

  events: {
    "NewStableSwapFactory(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Swap(address,address,address,uint256)": EventFragment;
    "SwapMulti(address,address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewStableSwapFactory"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Swap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapMulti"): EventFragment;
}

export type NewStableSwapFactoryEvent = TypedEvent<
  [string, string],
  { sender: string; factory: string }
>;

export type NewStableSwapFactoryEventFilter =
  TypedEventFilter<NewStableSwapFactoryEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type SwapEvent = TypedEvent<
  [string, string, string, BigNumber],
  {
    sender: string;
    srcTokenAddr: string;
    dstTokenAddr: string;
    srcAmount: BigNumber;
  }
>;

export type SwapEventFilter = TypedEventFilter<SwapEvent>;

export type SwapMultiEvent = TypedEvent<
  [string, string, string, BigNumber],
  {
    sender: string;
    srcTokenAddr: string;
    dstTokenAddr: string;
    srcAmount: BigNumber;
  }
>;

export type SwapMultiEventFilter = TypedEventFilter<SwapMultiEvent>;

export interface PancakeSwapSmartRouter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PancakeSwapSmartRouterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    owner(overrides?: CallOverrides): Promise<[string]>;

    pancakeswapV2(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStableSwapFactory(
      _factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stableswapFactory(overrides?: CallOverrides): Promise<[string]>;

    swap(
      srcToken: string,
      dstToken: string,
      amount: BigNumberish,
      minReturn: BigNumberish,
      flag: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapMulti(
      tokens: string[],
      amount: BigNumberish,
      minReturn: BigNumberish,
      flags: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    weth(overrides?: CallOverrides): Promise<[string]>;
  };

  owner(overrides?: CallOverrides): Promise<string>;

  pancakeswapV2(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStableSwapFactory(
    _factory: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stableswapFactory(overrides?: CallOverrides): Promise<string>;

  swap(
    srcToken: string,
    dstToken: string,
    amount: BigNumberish,
    minReturn: BigNumberish,
    flag: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapMulti(
    tokens: string[],
    amount: BigNumberish,
    minReturn: BigNumberish,
    flags: BigNumberish[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  weth(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    owner(overrides?: CallOverrides): Promise<string>;

    pancakeswapV2(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setStableSwapFactory(
      _factory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stableswapFactory(overrides?: CallOverrides): Promise<string>;

    swap(
      srcToken: string,
      dstToken: string,
      amount: BigNumberish,
      minReturn: BigNumberish,
      flag: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapMulti(
      tokens: string[],
      amount: BigNumberish,
      minReturn: BigNumberish,
      flags: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    weth(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "NewStableSwapFactory(address,address)"(
      sender?: string | null,
      factory?: string | null
    ): NewStableSwapFactoryEventFilter;
    NewStableSwapFactory(
      sender?: string | null,
      factory?: string | null
    ): NewStableSwapFactoryEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Swap(address,address,address,uint256)"(
      sender?: string | null,
      srcTokenAddr?: null,
      dstTokenAddr?: null,
      srcAmount?: null
    ): SwapEventFilter;
    Swap(
      sender?: string | null,
      srcTokenAddr?: null,
      dstTokenAddr?: null,
      srcAmount?: null
    ): SwapEventFilter;

    "SwapMulti(address,address,address,uint256)"(
      sender?: string | null,
      srcTokenAddr?: null,
      dstTokenAddr?: null,
      srcAmount?: null
    ): SwapMultiEventFilter;
    SwapMulti(
      sender?: string | null,
      srcTokenAddr?: null,
      dstTokenAddr?: null,
      srcAmount?: null
    ): SwapMultiEventFilter;
  };

  estimateGas: {
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pancakeswapV2(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStableSwapFactory(
      _factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stableswapFactory(overrides?: CallOverrides): Promise<BigNumber>;

    swap(
      srcToken: string,
      dstToken: string,
      amount: BigNumberish,
      minReturn: BigNumberish,
      flag: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapMulti(
      tokens: string[],
      amount: BigNumberish,
      minReturn: BigNumberish,
      flags: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pancakeswapV2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStableSwapFactory(
      _factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stableswapFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swap(
      srcToken: string,
      dstToken: string,
      amount: BigNumberish,
      minReturn: BigNumberish,
      flag: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapMulti(
      tokens: string[],
      amount: BigNumberish,
      minReturn: BigNumberish,
      flags: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
